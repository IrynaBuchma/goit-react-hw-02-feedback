{"ast":null,"code":"var _jsxFileName = \"D:\\\\GoIT\\\\goit-react-hw-02-feedback\\\\src\\\\components\\\\App.jsx\";\nimport { Component } from \"react\";\nimport Statistics from '../components/Statistics';\nimport FeedbackOptions from '../components/FeedbackOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.addStatisticValue = prop => {\n      this.setState(prevState => ({\n        [prop]: prevState[prop] + 1\n      }));\n    };\n\n    this.countTotalFeedback = () => {\n      return Object.values(this.state).reduce((acc, prop) => acc + prop, 0);\n    };\n  }\n\n  countPositiveFeedbackPercentage() {\n    const {\n      good\n    } = this.state;\n    return Math.round(good * 100 / this.countTotalFeedback()) || 0;\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad\n    } = this.state;\n    const total = this.countTotalFeedback;\n    const positiveFeedbackPercentage = this.countPositiveFeedbackPercentage;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 40,\n        color: '#010101'\n      },\n      children: [/*#__PURE__*/_jsxDEV(FeedbackOptions, {\n        options: Object.keys(this.state),\n        onLeaveFeedback: this.addStatisticValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: total,\n        positiveFeedbackPercentage: positiveFeedbackPercentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["D:/GoIT/goit-react-hw-02-feedback/src/components/App.jsx"],"names":["Component","Statistics","FeedbackOptions","App","state","good","neutral","bad","addStatisticValue","prop","setState","prevState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","render","total","positiveFeedbackPercentage","height","display","justifyContent","alignItems","fontSize","color","keys"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BI,KAF0B,GAElB;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,GAAG,EAAE;AAHC,KAFkB;;AAAA,SAQ1BC,iBAR0B,GAQNC,IAAI,IAAI;AAC1B,WAAKC,QAAL,CAAcC,SAAS,KAAK;AAC1B,SAACF,IAAD,GAAQE,SAAS,CAACF,IAAD,CAAT,GAAkB;AADA,OAAL,CAAvB;AAGD,KAZyB;;AAAA,SAc1BG,kBAd0B,GAcL,MAAM;AACzB,aAAOC,MAAM,CAACC,MAAP,CAAc,KAAKV,KAAnB,EAA0BW,MAA1B,CAAiC,CAACC,GAAD,EAAMP,IAAN,KAAeO,GAAG,GAAGP,IAAtD,EAA4D,CAA5D,CAAP;AACD,KAhByB;AAAA;;AAkB1BQ,EAAAA,+BAA+B,GAAG;AAChC,UAAK;AAAEZ,MAAAA;AAAF,QAAW,KAAKD,KAArB;AACA,WAAOc,IAAI,CAACC,KAAL,CAAYd,IAAI,GAAG,GAAR,GAAe,KAAKO,kBAAL,EAA1B,KAAwD,CAA/D;AACD;;AAEDQ,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEf,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAAwB,KAAKH,KAAnC;AACA,UAAMiB,KAAK,GAAG,KAAKT,kBAAnB;AACA,UAAMU,0BAA0B,GAAG,KAAKL,+BAAxC;AAEA,wBACE;AACE,MAAA,KAAK,EAAE;AACLM,QAAAA,MAAM,EAAE,OADH;AAELC,QAAAA,OAAO,EAAE,MAFJ;AAGLC,QAAAA,cAAc,EAAE,QAHX;AAILC,QAAAA,UAAU,EAAE,QAJP;AAKLC,QAAAA,QAAQ,EAAE,EALL;AAMLC,QAAAA,KAAK,EAAE;AANF,OADT;AAAA,8BAUE,QAAC,eAAD;AAAiB,QAAA,OAAO,EAAEf,MAAM,CAACgB,IAAP,CAAY,KAAKzB,KAAjB,CAA1B;AAAmD,QAAA,eAAe,EAAE,KAAKI;AAAzE;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE,QAAC,UAAD;AACE,QAAA,IAAI,EAAEH,IADR;AAEE,QAAA,OAAO,EAAEC,OAFX;AAGE,QAAA,GAAG,EAAEC,GAHP;AAIE,QAAA,KAAK,EAAEc,KAJT;AAKE,QAAA,0BAA0B,EAAEC;AAL9B;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD;;AAjDyB;;AAkD3B;AAED,eAAenB,GAAf","sourcesContent":["import {Component} from \"react\";\r\nimport Statistics from '../components/Statistics';\r\nimport FeedbackOptions from '../components/FeedbackOptions';\r\n\r\nclass App extends Component {\r\n  \r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0\r\n  }\r\n\r\n  addStatisticValue = prop => {\r\n    this.setState(prevState => ({\r\n      [prop]: prevState[prop] + 1\r\n    }))\r\n  }\r\n\r\n  countTotalFeedback = () => {\r\n    return Object.values(this.state).reduce((acc, prop) => acc + prop, 0 ); \r\n  }\r\n\r\n  countPositiveFeedbackPercentage() {\r\n    const{ good } = this.state;\r\n    return Math.round((good * 100) / this.countTotalFeedback()) || 0;\r\n  } \r\n\r\n  render() {\r\n\r\n    const { good, neutral, bad} = this.state;\r\n    const total = this.countTotalFeedback;\r\n    const positiveFeedbackPercentage = this.countPositiveFeedbackPercentage;\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          height: '100vh',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          fontSize: 40,\r\n          color: '#010101'\r\n        }}\r\n      > \r\n        <FeedbackOptions options={Object.keys(this.state)} onLeaveFeedback={this.addStatisticValue}/>\r\n        <Statistics\r\n          good={good} \r\n          neutral={neutral} \r\n          bad={bad} \r\n          total={total} \r\n          positiveFeedbackPercentage={positiveFeedbackPercentage}></Statistics>\r\n      </div>   \r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}